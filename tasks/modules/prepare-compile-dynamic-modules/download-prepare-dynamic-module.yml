---
# - name: Set nginx_dynamic_module_to_download
#   ansible.builtin.set_fact:
#     nginx_dynamic_module_to_download:
#       name: brotli
#       url: "https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz"
#       dest: /Users/mohamedlamineallal/repos/test-ansible/download-nginx-dynamic-modules
#       mode: "0600"

# dest of the module can be
# - Either a folder
#   - in such a case: the downloaded file will be named following the website naming
# - A file path
#   - The download will be downloaded to that naming
#   - ex: `dest: /tmp/my-module.1.0.1.tar.gz`
- name: Download the dynamic module source
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest | default(nginx_dynamic_module_default.dest) }}"
    mode: "{{ item.mode | default(nginx_dynamic_module_default.mode) }}"
  register: nginx_dynamic_module_download_result

# We unpack the downloaded file with it's downloaded name
# - If a user want to name the module folder in some way. He should set the dest for the module download with `dest: /tmp/my-module.1.0.1.tar.gz`
# -- Than the umpacking will be in same folder ()'/tmp' here) and gonna be `/tmp/my-module.1.0.1`
- name: Unpack Downloaded
  ansible.builtin.unarchive:
    copy: false
    src: "{{ nginx_dynamic_module_download_result.dest }}"
    dest: "{{ nginx_dynamic_module_download_result.dest | dirname }}"
    mode: "0700"
    list_files: true
    # extra_opts:
    #   - --strip-components=1
  register: nginx_dynamic_module_unarchive_result

- name: Update item object with download, unarchive, configure info and ngx_addon_name # noqa jinja[spacing]
  vars:
    out: "{{
        nginx_dynamic_module_unarchive_result.dest +
        '/' +
        (
          nginx_dynamic_module_unarchive_result.files[0] |
          regex_replace('^(.*)\\/$', '\\1')
        )
      }}"
    configure: "--add-dynamic-module=\"{{ out }}\""
  block:
    - name: Get module name from config file
      when: item.ngx_addon_name is not defined
      block:
        - name: Read config file
          ansible.builtin.slurp:
            src: "{{ out }}/config"
          register: module_config
        - name: Get addon name
          ansible.builtin.set_fact:
            temp_ngx_addon_name: "{{ module_config.content | b64decode | regex_replace('[\\s\\S]*?ngx_addon_name=(\\S+)[\\s\\S]*', '\\1') }}"
    # We are constructing a temp modules list, that contain the updated items. In the parent task we do override the original modules list to reflect the updates
    - name: Add updated item to modules_temp # noqa jinja[spacing]
      ansible.builtin.set_fact:
        modules_temp: "{{
            modules_temp +
              item |
              combine({
                'ngx_addon_name': temp_ngx_addon_name |
                  default(item.ngx_addon_name) |
                  default(item.name),
                'archive': nginx_dynamic_module_download_result.dest,
                'out': out,
                'configure': configure
              })
          }}"
