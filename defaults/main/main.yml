---
# Enable NGINX and NGINX modules.
# Variables for these options can be found below.
# Default is true.
nginx_enable: true

# Print NGINX configuration file to terminal after executing playbook.
nginx_debug_output: false

# Specify which type of NGINX you want to install.
# Options are 'opensource' or 'plus'.
# Default is 'opensource'.
nginx_type: opensource

# (Optional) Specify which version of NGINX you want to install.
# Default is to install the latest release.
# For NGINX Open Source you'll need to specify the relevant release like below (Ubuntu jammy example).
# nginx_version: "=1.23.2-1~jammy"
# For NGINX Plus you'll need to specify the R* release like below (Ubuntu jammy example).
# nginx_version: "=28-1~jammy"
# For Open source and from source the version should be of the following format 1.25.1
# As in https://nginx.org/download/ `nginx-<version>.<extension>`
# nginx_version: "1.25.1"

# Nginx service

# Start NGINX service.
# Default is true.
nginx_start: true

# Nginx systemd
nginx_service_systemd_src: services/nginx.systemd
nginx_service_upstart_src: services/nginx.upstart
nginx_service_upstart_conf_src: services/nginx.conf.upstart
nginx_service_sysvinit_src: services/nginx.sysvinit
nginx_service_openrc_src: services/nginx.openrc

# Specify whether you want to install NGINX, upgrade to the latest version, or remove NGINX.
# Can be used with `nginx_version` to fine tune control which version of NGINX is installed/used on each playbook execution.
# Using 'install' will install the latest version (or 'nginx_version') of NGINX on a fresh install.
# Using 'upgrade' will upgrade NGINX to the latest version (that matches your 'nginx_version') of NGINX on every playbook execution.
# Using 'uninstall' will remove NGINX from your system.
# Default is install.
nginx_setup: install

# Specify whether or not you want to manage the NGINX repositories.
# Using 'true' will manage NGINX repositories.
# Using 'false' will not manage the NGINX repositories, allowing them to be managed through other means.
# Default is true
nginx_manage_repo: true

# Specify repository origin for NGINX Open Source.
# Only works if 'nginx_type' is set to 'opensource'.
# Options are 'nginx_repository', 'source' or 'os_repository'.
# When using 'os_repository' on CentOS/RHEL 7 based systems, you will also need to install the EPEL repository (see the 'nginx_install_epel_release' variable below).
# Default is nginx_repository.
nginx_install_from: nginx_repository

# Specify source install options for NGINX Open Source.
# Options represent whether to install from source also or to install from packages (default).
# These only apply if 'nginx_install_from' is set to 'source'.
# 'nginx_install_source_build_tools' will install compiler and build tools from packages.
# If set to false, you need to have these present.
# For the required libraries, true means we will install from source and false means we will install using the default package manager.
nginx_install_source_build_tools: true
nginx_install_source_pcre: false
nginx_install_source_openssl: true
nginx_install_source_zlib: false
nginx_install_source_dest: /tmp
nginx_install_source_modules_path: /usr/lib/nginx/modules
nginx_install_source_control_prep_compile_only: false # For internal usage generaly (you can use nginx_install_dynamic_module_only for dynamic module install only)
# - If you need to install an openssl that is different than the official. Like a one that support Quick. Disable installing from source. And add --with-openssl="" that point to another version source (downloaded before this install task) [TODO] - [] add support for different openssl options quick support ..., - [] add support for not installing openssl at all. So that we can add manual install and flags bellow. The source should be handled before - [] we can add a pre-install cmds run list
# nginx_install_source_configure_cmd_base: >-
#   ./configure
#   --conf-path=/etc/nginx/nginx.conf
#   --error-log-path=/var/log/nginx/error.log
#   --http-log-path=/var/log/nginx/access.log
#   --lock-path=/var/lock/nginx.lock
#   --modules-path={{ nginx_install_source_modules_path }}
#   --prefix=/usr
#   --pid-path=/var/run/nginx.pid
#   --user=nginx
#   --with-mail=dynamic
#   --with-stream

# nginx_install_source_configure_extra_params: # Not needed if nginx_install_source_configure_cmd_base is set
#   - --with-something
#   - --anotherparam

# Specify source install module for NGINX Open Source.
# You can select any of the static modules listed on http://nginx.org/en/docs/configure.html.
# Format is '--with-*' where '*' should be used as static module name in the list below. (see an example below).
# Default is 'http_ssl_module'. (DO NOT remove it if you need SSL support).
# --with-mail=dynamic
# --with-stream
# > already included in config
# - You can add --with-file-aio --with-compat
#    - using `file-aio` `compat`
#    - However its better to add no module params in `nginx_install_source_configure_extra_params` or in `nginx_install_source_configure_cmd_base` if specified
nginx_static_modules: [http_ssl_module]
# nginx_static_modules: ['http_v2_module']  # Example for '--with-http_v2_module'

nginx_install_dynamic_module_only: false

# nginx_compile_install_dynamic_modules:
#   # ### All params
#   - name: some_module | some_preset
#     preset: some_preset (sort of alias to name)
#     version:
#     url:
#     git_clone_opt:
#        depth: ...
#     preset_vars:
#         dep_1:
#             version:
#         dep_2:
#     ngx_module_name:
#     disable_auto_install: # default false # turn to true when you need to run install_cmds without auto install (Otherwise combine auto-install with install_cmds if needed)
#     before_configure: "MOD_PAGESPEED_DIR="$HOME/mod_pagespeed/src" # can use >- or >
#     configure_extra_params
#     module_path_in_src:
#     dest:
#     mode:
#     module_mode: # mode for final modules when copied (installed)
#     dependencies:
#       - name:
#         version:
#         ... all package params
#       - name:
#         ...
#     # Those one for complex cmd based operations
#     dependencies_cmds:
#       - cmd:
#         chdir:
#         creates:
#       - cmd:
#         chdir:
#         creates:
#     download_cmds # Run Check, download and anything else using shell
#       - src_dir:
#       - src_archive_file:
#       - shell:
#           cmd:
#           chdir:
#           creates:
#         src_dir: optional
#         src_archive_file: optional
#       - shell:
#           cmd:
#           chdir:
#           creates:
#         src_dir: optional
#         src_archive_file: optional
#     configure_cmds
#       - cmd: # Change to any dir, is expected to be handled in the shell command
#         chdir:
#         creates:
#       - cmd:
#         chdir:
#         creates:
#     make_cmds
#       - cmd:
#         chdir:
#         creates:
#       - cmd:
#         chdir:
#         creates:
#     install_cmds
#       - cmd: # Expect to handle full installation, copying the files ....
#         chdir:
#         creates:
#       - cmd:
#         chdir:
#         creates:
#   # This would use the mod_brotli default preset
#   # - `name`, `version` all that is required
#   - name: "mod_brotli"
#     version: 1.0.0rc
#     dest: "/tmp"
#     mode: "0600"
#   - name: "mod_brotli"
#     ngx_module_name: "ngx_http_brotli_filter_module,ngx_http_brotli_static_module"
#     url: "https://github.com/google/ngx_brotli/archive/refs/tags/v1.0.0rc.tar.gz"
#     dest: "/tmp"
#     mode: "0600"
#   - name: "mod_brotli"
#     ngx_module_name:
#       - ngx_http_brotli_filter_module
#       - ngx_http_brotli_static_module
#     url: "https://github.com/google/ngx_brotli/archive/refs/tags/v1.0.0rc.tar.gz"
#     dest: "/tmp"
#     mode: "0600"

#   - name: "mod_passenger"
#     version: 6.0.18
#     dest: "/usr/share"
#     mode: "0600"
#   - name: "mod_passenger"
#     url: "https://github.com/phusion/passenger/archive/refs/tags/release-6.0.18.tar.gz"
#     module_path_in_src: src/nginx_module # need to be relative
#     dest: "/tmp"
#     mode: "0600"
#   - name: ""
#     url: ""
#     dest: "/tmp"
#     mode: "0600"

nginx_dynamic_module_default:
  dest: "{{ nginx_install_source_dest }}"
  mode: "0600"

# (Optional) Choose where to fetch the NGINX signing key from.
# Default is the official NGINX signing key host.
# nginx_signing_key: http://nginx.org/keys/nginx_signing.key

# (Optional) Specify repository for NGINX Open Source or NGINX Plus.
# Only works if 'install_from' is set to 'nginx_repository' when installing NGINX Open Source.
# Defaults are the official NGINX repositories.
# nginx_repository: deb https://nginx.org/packages/mainline/debian/ buster nginx

# Specify which branch of NGINX Open Source you want to install.
# Options are 'mainline' or 'stable'.
# Only works if 'install_from' is set to 'nginx_repository' or 'source'.
# Default is mainline.
nginx_branch: mainline

# Location of your NGINX Plus license in your local machine.
# Default is the files folder within the NGINX Ansible role.
nginx_license:
  certificate: license/nginx-repo.crt
  key: license/nginx-repo.key

# Set up NGINX Plus license before installation.
# Default is true.
nginx_setup_license: true

# Remove NGINX Plus license and repository after installation for security purposes.
# Default is true.
nginx_remove_license: true

# Specify whether or not you want this role to install the EPEL package when installing NGINX OSS in some distributions and some NGINX OSS/Plus modules.
# Using 'true' will install EPEL.
# Using 'false' will not install EPEL.
# Default is true.
nginx_install_epel_release: true

# Install NGINX Dynamic Modules.
# You can select any of the dynamic modules listed below. Beware of NGINX Plus only dynamic modules (these are marked).
# Format is list with either the dynamic module name or a dictionary (see njs for an example).
# When using a dictionary, the default value for state is present, and for version it's nginx_version if specified.
# Default is an empty list (no dynamic modules are installed).
nginx_modules: []
  # - auth-spnego  # NGINX Plus
  # - brotli  # NGINX Plus
  # - cookie-flag  # NGINX Plus
  # - encrypted-session  # NGINX Plus
  # - geoip
  # - geoip2  # NGINX Plus
  # - headers-more  # NGINX Plus
  # - image-filter
  # - lua  # NGINX Plus
  # - ndk  # NGINX Plus
  # - name: njs  # Required
  #   state: present  # Optional
  #   version: =1.19.4+0.4.4-1~bionic  # Optional
  # - opentracing  # NGINX Plus
  # - passenger  # NGINX Plus
  # - perl
  # - prometheus  # NGINX Plus
  # - rtmp  # NGINX Plus
  # - set-misc  # NGINX Plus
  # - subs-filter  # NGINX Plus
  # - waf  # NGINX Plus
  # - xslt
